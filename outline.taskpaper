Actually Invented Here:
- Why I'm giving this talk @done
- Overview of "Not Invented Here" @done
	- "Frameworks save time" @done
	- How this gets reinforced @done
		- Social pressure @done
			- Intimidation (Rails community is chock-full of arrogant assholes) @done
			- "Just install x" @done
		- Client pressure @done
			- "Isn't there something for y already?" @done
		- You pressure @done
			- "I don't have time / skill / energy / capacity to build z" @done
- "You're more inclined to use that tool when you don't understand what it's doing." @done
- Problems with this approach @done
	- I. Money (& time) @done
		- Problem: MVP in a week @done
		- NIH: Devise & ActiveAdmin @done
		- AIH: Authem or custom login @done
	- II. Energy (frustration) @done
		- Problem: Client uses signed SOAP requests @done
		- NIH: Savon, LolSoap, and Signer @done
		- AIH: Wasabi and Nokogiri @done
	- III. Control @done
		- Problem: I need a responsive design that can make things pretty @done
		- NIH: Bootstrap @done
		- AIH: custom LESS in 28 lines @done
		- Problem: you need Resque and Delayed::Job-style features; you maintain a fork that you ocassionaly merge which explodes @done
			- Many open-source APIs are closed enough boxes of functionality that you don't @done
				- SIDE NOTE: open source developers, make this  @done
		- Solution: Learn how both work and do one of two things: @done
			- 1. Fork an environment job that sleeps and pings the database periodically @done
			- 2. Install Sidekiq @done
	- IV. Performance (benchmarks) @done
		- Devise benchmarks @done
		- ActiveAdmin benchmarks @done
		- `time rake assets:precompile`
	- V. Reputation (their bugs are your bugs) @done
		- Problem: Devise security flaws; now all your clients (or your product) have downtime and unbillable hours @done
		- Solution: simple login system, Authem @done
			- SIDE NOTE: Make your own decisions about server software, too @done
				- YOU can run a server without Heroku. Do it. @done
	- VI. Risk @done
		- Maintainers drop off @done
	- Dignity (youâ€™re a programmer!) @done
		- Whither the poetry of a beautifully written solution? @done
		- You're one of a tiny minority of people in the world who can make things out of nothing @done
		- Don't spoil it with primary sources; *become* a primary source @done
- Guides for finding the gray area @done
		- If it's a core part of your app, understand *exactly* why you chose a solution @done
			- If you don't know why, or you look at it and it seems less and less clear, build it yourself @done
		- "You're more inclined to use that tool when you don't understand what it's doing." @done
		- If you don't understand what you're doing, LEARN from the people who do @done
			- THEN make up your mind @done
	- Timeboxing: 1 hour, 1 day, whatever @done
	- Ignore questions of style or syntax @done
		- Focus instead on test coverage and functional appropriateness @done
		- Also focus on gem startup times @done
- Conclusions
	- The value of OSS isn't measured in its gem installs; it's measured in how well it solves your problem according to the following guidelines: @done
		- Doesn't cost you money @done
		- Doesn't cause you frustration @done
		- Doesn't reduce your control of your own software @done
		- Doesn't decrease your performance @done
		- Doesn't hurt your reputation or your choices @done
		- Doesn't make you feel lazy @done
		- Solves *your* problem @done
	- The world needs alternatives. DHH would have us believe that "Rails is omakase," but you're still writing in Ruby and you can still do whatever you want *with* Ruby. @done
		- (except subclass Fixnum) @done
	- Being an open-source consumer rather than contributor puts you at the mercy of the mob @done
		- The mob isn't always right @done
		- Have the confidence to acknowledge that you are a creative powerhouse in this industry and you can make your own solutions
		- Create poetry with your own code
		- Gluing pieces of everyone else's work together 
